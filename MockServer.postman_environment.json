{
	"info": {
		"_postman_id": "5fe17dc9-7b32-49a7-98df-f1baee618d39",
		"name": "MockServer - Homework - DataDriven",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "2199404"
	},
	"item": [
		{
			"name": "getusers/all",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Body contains id\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"id\");\r",
							"});\r",
							"\r",
							"pm.test(\"Body contains Name\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"Name\");\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{url}}/getusers/all",
					"host": [
						"{{url}}"
					],
					"path": [
						"getusers",
						"all"
					]
				}
			},
			"response": [
				{
					"name": "Default",
					"originalRequest": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/getusers/all",
							"host": [
								"{{url}}"
							],
							"path": [
								"getusers",
								"all"
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": null,
					"header": null,
					"cookie": [],
					"body": "{\"id\":1,\"Name\":\"Ly Cao\"}"
				}
			]
		},
		{
			"name": "Register a new user",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const registerData = pm.iterationData.get(\"registerData\");",
							"const inTestEmail = registerData.email;",
							"const inTestPassword = registerData.password;",
							"",
							"//(OPTIONAL) Log the inTestEmail and inTestPassword in console to check if they are extracted correctly from our Data File",
							"console.log(`inTestEmail: [${inTestEmail}] | inTestPassword: [${inTestPassword}]`)",
							"",
							"//Store them to use in Tests",
							"pm.variables.set(\"email\", inTestEmail); ",
							"pm.variables.set(\"password\", inTestPassword); ",
							"",
							"const verificationData = pm.iterationData.get(\"verificationData\");",
							"const verificationMessage = verificationData.message;",
							"const expectedResponseCode = verificationData.expectedResponseCode;",
							"const expectResponseToContain = verificationData.expectResponseToContain;",
							"",
							"",
							"//(OPTIONAL) Log the verifycationMessage, expectedResponseCode and expectResponseToContain in console to check if they are extracted correctly from our Data File",
							"console.log(`verificationMessage: [${verificationMessage}] | expectedResponseCode: [${expectedResponseCode}] | expectResponseToContain: [${expectResponseToContain}]`)",
							"",
							"//Store them to use in Tests",
							"pm.variables.set(\"verificationMessage\", verificationMessage)",
							"pm.variables.set(\"expectedResponseCode\", expectedResponseCode)",
							"pm.variables.set(\"expectResponseToContain\", expectResponseToContain)",
							"",
							"//Form request body AKA payload",
							"const payload = JSON.stringify({",
							"    email: inTestEmail,",
							"    password: inTestPassword",
							"})",
							"",
							"//(OPTIONAL) Log the formed payload in console to check if it's what we want to form",
							"console.log(`Payload: ${payload}`);",
							"",
							"//Set the payload to \"body\" variable and use it in Body tab",
							"pm.variables.set(\"body\", payload);"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"const resBody = pm.response.json()",
							"",
							"pm.test(`${pm.variables.get(\"verificationMessage\")} email: [${pm.variables.get(\"email\")}] | password: [${pm.variables.get(\"password\")}]`, () => {",
							"    pm.response.to.have.status(pm.variables.get(\"expectedResponseCode\"));",
							"})",
							"",
							"pm.test(`Verify Response status code is [${pm.variables.get(\"expectedResponseCode\")}] and Response body contains [${pm.variables.get(\"expectResponseToContain\")}]`, () => {",
							"    pm.expect(JSON.stringify(resBody)).to.contain(pm.variables.get(\"expectResponseToContain\"));",
							"})"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{{body}}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://reqres.in/api/register",
					"protocol": "https",
					"host": [
						"reqres",
						"in"
					],
					"path": [
						"api",
						"register"
					]
				}
			},
			"response": [
				{
					"name": "Register a user successfully",
					"originalRequest": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\":\"eve.holt@reqres.in\",\r\n    \"password\":\"{$randomPassword}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/register",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"register"
							]
						}
					},
					"_postman_previewlanguage": null,
					"header": null,
					"cookie": [],
					"body": "{\r\n    \"id\": 4,\r\n    \"token\": \"QpwL5tke4Pnpja7X4\"\r\n}"
				},
				{
					"name": "Failed - Missing Email",
					"originalRequest": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"\",\r\n    \"password\": \"{$randomPassword}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/register",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"register"
							]
						}
					},
					"code": 400,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Date",
							"value": "Thu, 12 Sep 2024 03:53:24 GMT"
						},
						{
							"key": "Content-Type",
							"value": "application/json; charset=utf-8"
						},
						{
							"key": "Content-Length",
							"value": "17"
						},
						{
							"key": "Connection",
							"value": "keep-alive"
						},
						{
							"key": "x-srv-trace",
							"value": "v=1;t=b22c3ff6ec8931e6"
						},
						{
							"key": "x-srv-span",
							"value": "v=1;s=d77474535b444491"
						},
						{
							"key": "Access-Control-Allow-Origin",
							"value": "*"
						},
						{
							"key": "X-RateLimit-Limit",
							"value": "120"
						},
						{
							"key": "X-RateLimit-Remaining",
							"value": "119"
						},
						{
							"key": "X-RateLimit-Reset",
							"value": "1726113264"
						},
						{
							"key": "ETag",
							"value": "W/\"11-N53aHk+WTIguQXfM1GDrLuL9rbY\""
						},
						{
							"key": "Vary",
							"value": "Accept-Encoding"
						}
					],
					"cookie": [],
					"body": "{\r\n    \"error\": \"Missing Email or Username\"\r\n}"
				},
				{
					"name": "Failed- missing password",
					"originalRequest": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\":\"\",\r\n    \"password\":\"{$randomPassword}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/register",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"register"
							]
						}
					},
					"status": "Bad Request",
					"code": 400,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json",
							"description": "",
							"type": "text"
						}
					],
					"cookie": [],
					"body": "{\"error\": \"Missing Email or UserName\" }"
				}
			]
		},
		{
			"name": "Mock - Register user",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const registerData = pm.iterationData.get(\"registerData\");",
							"const inTestEmail = registerData.email;",
							"const inTestPassword = registerData.password;",
							"",
							"//(OPTIONAL) Log the inTestEmail and inTestPassword in console to check if they are extracted correctly from our Data File",
							"console.log(`inTestEmail: [${inTestEmail}] | inTestPassword: [${inTestPassword}]`)",
							"",
							"//Store them to use in Tests",
							"pm.variables.set(\"email\", inTestEmail); ",
							"pm.variables.set(\"password\", inTestPassword); ",
							"",
							"const verificationData = pm.iterationData.get(\"verificationData\");",
							"const verificationMessage = verificationData.message;",
							"const expectedResponseCode = verificationData.expectedResponseCode;",
							"const expectResponseToContain = verificationData.expectResponseToContain;",
							"",
							"",
							"//(OPTIONAL) Log the verifycationMessage, expectedResponseCode and expectResponseToContain in console to check if they are extracted correctly from our Data File",
							"console.log(`verificationMessage: [${verificationMessage}] | expectedResponseCode: [${expectedResponseCode}] | expectResponseToContain: [${expectResponseToContain}]`)",
							"",
							"//Store them to use in Tests",
							"pm.variables.set(\"verificationMessage\", verificationMessage)",
							"pm.variables.set(\"expectedResponseCode\", expectedResponseCode)",
							"pm.variables.set(\"expectResponseToContain\", expectResponseToContain)",
							"",
							"//Form request body AKA payload",
							"const payload = JSON.stringify({",
							"    email: inTestEmail,",
							"    password: inTestPassword",
							"})",
							"",
							"//(OPTIONAL) Log the formed payload in console to check if it's what we want to form",
							"console.log(`Payload: ${payload}`);",
							"",
							"//Set the payload to \"body\" variable and use it in Body tab",
							"pm.variables.set(\"body\", payload);"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"const resBody = pm.response.json()",
							"",
							"pm.test(`${pm.variables.get(\"verificationMessage\")} email: [${pm.variables.get(\"email\")}] | password: [${pm.variables.get(\"password\")}]`, () => {",
							"    pm.response.to.have.status(pm.variables.get(\"expectedResponseCode\"));",
							"})",
							"",
							"pm.test(`Verify Response status code is [${pm.variables.get(\"expectedResponseCode\")}] and Response body contains [${pm.variables.get(\"expectResponseToContain\")}]`, () => {",
							"    pm.expect(JSON.stringify(resBody)).to.contain(pm.variables.get(\"expectResponseToContain\"));",
							"})"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{{body}}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://reqres.in/api/register",
					"protocol": "https",
					"host": [
						"reqres",
						"in"
					],
					"path": [
						"api",
						"register"
					]
				}
			},
			"response": []
		}
	],
	"variable": [
		{
			"key": "url",
			"value": "https://3c06b431-6035-43a9-baf1-513cb202f26d.mock.pstmn.io"
		}
	]
}